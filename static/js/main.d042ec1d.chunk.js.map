{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","AboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","background","rows","newText","toUpperCase","showAlert","toLowerCase","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","document","getElementById","textContent","innerHTML","cancel","select","navigator","clipboard","writeText","split","join","length","About","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","classNameName","border","Alert","alert","word","lower","charAt","slice","capitalize","App","setMode","setAlert","message","setTimeout","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"mOAGe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAAI,eAAOF,EAAME,MAAO,SAChF,sBAAKD,UAAU,kBAAiB,UAC9B,cAAC,IAAI,CAACA,UAAU,eAAeE,KAAK,IAAG,SAAEH,EAAMI,QAC/C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmB,SAC7M,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAAwB,UACnE,qBAAIL,UAAU,kCAAiC,UAE7C,oBAAIA,UAAU,WAAU,SACtB,cAAC,IAAI,CAACA,UAAU,kBAAkB,eAAa,OAAOM,GAAG,IAAG,SAAC,WAG/D,oBAAIN,UAAU,WAAU,SACtB,cAAC,IAAI,CAACA,UAAU,WAAWM,GAAG,SAAQ,SAAEP,EAAMQ,iBAQhD,sBAAKP,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAU,UAC3F,uBAAOD,UAAU,mBAAmBQ,QAAST,EAAMU,WAAYL,KAAK,WAAWM,KAAK,SAASL,GAAG,2BAChG,uBAAOL,UAAU,mBAAmBW,QAAQ,yBAAwB,SAAC,8BAO/E,CClCe,SAASC,EAASb,GAC7B,IAkDA,EAAwBc,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KAEtB,OACE,qCACD,sBAAKf,UAAU,YAAYgB,MAAO,CAACC,MAAsB,SAAflB,EAAME,KAAkB,QAAU,WAAW,UACtF,6BAAKF,EAAMmB,UACX,qBAAKlB,UAAU,OAAM,SACrB,0BAAUA,UAAU,eAAemB,MAAOL,EAAMM,SAXzB,SAACC,GACpBN,EAAQM,EAAMC,OAAOH,MACzB,EAS0EH,MAAO,CAACO,WAAyB,SAAbxB,EAAME,KAAgB,UAAY,QAASgB,MAAsB,SAAflB,EAAME,KAAkB,QAAU,WAClLI,GAAG,QAAQmB,KAAK,QAEhB,wBAAQxB,UAAU,4BAA2BQ,QA5DvB,WAClB,IAAIiB,EAAUX,EAAKY,cACnBX,EAAQU,GACR1B,EAAM4B,UAAU,0BAA4B,UAChD,EAwDoE,SAAC,yBACrE,wBAAQ3B,UAAU,uBAAsBQ,QAjDf,WAErBO,EADe,IAEfhB,EAAM4B,UAAU,mBAAqB,UACzC,EA6CkE,SAAC,eACnE,wBAAQ3B,UAAU,uBAAsBQ,QAxDlB,WAClB,IAAIiB,EAAUX,EAAKc,cACnBb,EAAQU,GACR1B,EAAM4B,UAAU,0BAA4B,UAChD,EAoD+D,SAAC,yBAChE,wBAAQvB,KAAK,SAASI,QA7CN,WACZ,IAAIqB,EAAM,IAAIC,yBAAyBhB,GACvCiB,OAAOC,gBAAgBC,MAAMJ,GAC7B,IAAMK,EAASC,SAASC,eAAe,UACZ,UAAvBF,EAAOG,YACPH,EAAOI,UAAY,QAGnBJ,EAAOI,UAAY,SACfJ,EAAOI,UAAY,UACnBP,OAAOC,gBAAgBO,UAG/BxC,EAAM4B,UAAU,sBAAwB,UAC5C,EA+BsC3B,UAAU,4BAA4BK,GAAG,SAAQ,SAAC,UACxF,wBAAQL,UAAU,uBAAsBQ,QA/BrB,WACnB,IAAIM,EAAOqB,SAASC,eAAe,SACnCtB,EAAK0B,SACLC,UAAUC,UAAUC,UAAU7B,EAAKK,OACnCpB,EAAM4B,UAAU,uBAAyB,UACzC,EA0B4D,SAAC,cAC7D,wBAAQ3B,UAAU,uBAAsBQ,QAzBd,WACtB,IAAIiB,EAAUX,EAAK8B,MAAM,QACzB7B,EAAQU,EAAQoB,KAAK,MACrB9C,EAAM4B,UAAU,wBAA0B,UAC9C,EAqBmE,SAAC,2BAGrE,sBAAK3B,UAAU,iBAAiBgB,MAAO,CAACC,MAAsB,SAAflB,EAAME,KAAkB,QAAU,WAAW,UAC3F,6BAAI,sBACJ,8BAAIa,EAAK8B,MAAM,KAAKE,OAAO,cAAYhC,EAAKgC,OAAO,iBACnD,8BAAI,KAAQhC,EAAK8B,MAAM,KAAKE,OAAO,mBACnC,6BAAI,YACJ,4BAAIhC,EAAKgC,OAAS,EAAIhC,EAAM,iEAIhC,CC9Ee,SAASiC,IACpB,MAA8BlC,mBAC1B,CACII,MAAO,QACP+B,gBAAiB,UAExB,mBALMC,EAAO,KAAEC,EAAU,KAM1B,EAA8BrC,mBAAS,oBAAmB,mBAAnDsC,EAAO,KAAEC,EAAU,KAsB5B,OACI,sBAAKC,cAAc,YAAYrC,MAAOiC,EAAQ,UAC5C,oBAAII,cAAc,OAAM,SAAC,aACzB,sBAAKrD,UAAU,YAAYK,GAAG,mBAAkB,UACtD,sBAAKL,UAAU,iBAAgB,UAC7B,oBAAIA,UAAU,mBAAmBK,GAAG,aAAY,SAC9C,wBAAQL,UAAU,mBAAmBI,KAAK,SAAS,iBAAe,WAAWY,MAAOiC,EAAS,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAa,SAAC,YAI9K,qBAAK5C,GAAG,cAAcL,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAAmB,SAChI,sBAAKA,UAAU,iBAAiBgB,MAAOiC,EAAQ,UAC7C,iCAAQ,6CAAiD,qXAAkX,+BAAM,oBAAuB,uDAI9c,sBAAKjD,UAAU,iBAAgB,UAC7B,oBAAIA,UAAU,mBAAmBK,GAAG,aAAY,SAC9C,wBAAQL,UAAU,6BAA6BgB,MAAOiC,EAAS7C,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAa,SAAC,cAIzL,qBAAKC,GAAG,cAAcL,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAAmB,SAC3H,sBAAKA,UAAU,iBAAiBgB,MAAOiC,EAAQ,UAC7C,iCAAQ,8CAAkD,sXAAmX,+BAAM,oBAAuB,uDAIhd,sBAAKjD,UAAU,iBAAgB,UAC7B,oBAAIA,UAAU,mBAAmBK,GAAG,eAAc,SAChD,wBAAQL,UAAU,6BAA6BgB,MAAOiC,EAAS7C,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAe,SAAC,cAI7L,qBAAKC,GAAG,gBAAgBL,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAAmB,SAC/H,sBAAKA,UAAU,iBAAiBgB,MAAOiC,EAAQ,UAC7C,iCAAQ,6CAAiD,sXAAmX,+BAAM,oBAAuB,0DAKjd,qBAAKjD,UAAU,iBAAgB,SAC/B,wBAAQQ,QA9DgB,WACK,UAAlByC,EAAQhC,OACPiC,EAAW,CACPjC,MAAO,QACP+B,gBAAiB,QACjBM,OAAQ,oBAGZF,EAAW,uBAGXF,EAAW,CACPjC,MAAO,QACP+B,gBAAiB,QACjBM,OAAQ,oBAEZF,EAAW,oBAEnB,EA4C0BhD,KAAK,SAASJ,UAAU,eAAc,SAAEmD,QAItE,CC9DgBI,MAdhB,SAAexD,GAMb,OACCA,EAAMyD,OAAS,sBAAKxD,UAAS,sBAAiBD,EAAMyD,MAAMpD,KAAI,gCAAgCM,KAAK,QAAO,UACrG,iCAPe,SAAC+C,GAChB,IAAMC,EAAQD,EAAK7B,cACnB,OAAO8B,EAAMC,OAAO,GAAGjC,cAAgBgC,EAAME,MAAM,EACvD,CAIaC,CAAW9D,EAAMyD,MAAMpD,QAAe,MAAIL,EAAMyD,MAAM3B,MAKrE,E,OC6CaiC,MAlDf,WAEE,MAAwBjD,mBAAS,SAAQ,mBAAlCZ,EAAI,KAAE8D,EAAO,KACpB,EAA0BlD,mBAAS,MAAK,mBAAjC2C,EAAK,KAAEQ,EAAQ,KAEhBrC,EAAY,SAACsC,EAAS7D,GAC1B4D,EAAS,CACPnC,IAAKoC,EACL7D,KAAMA,IAER8D,YAAW,WACTF,EAAS,KACX,GAAG,KACL,EAiBA,OACE,mCACF,eAAC,IAAM,WACJ,cAAClE,EAAM,CAACK,MAAQ,YAAYI,UAAY,QAAQN,KAAQA,EAAMQ,WAlB9C,WACJ,UAATR,GACF8D,EAAQ,QACR5B,SAASgC,KAAKnD,MAAMgC,gBAAkB,UACtCrB,EAAU,6BAA8B,WACxCQ,SAAShC,MAAQ,0BAGjB4D,EAAQ,SACR5B,SAASgC,KAAKnD,MAAMgC,gBAAkB,QACtCrB,EAAU,8BAA+B,WACzCQ,SAAShC,MAAQ,yBAErB,IAMG,cAAC,EAAK,CAACqD,MAAOA,IACd,qBAAKxD,UAAU,iBAAgB,SAC/B,eAAC,IAAM,WACN,cAAC,IAAK,CAACoE,OAAK,EAACC,KAAK,SAASC,QAAS,cAACvB,EAAK,MAG1C,cAAC,IAAK,CAACqB,OAAK,EAACC,KAAK,IAAIC,QAAU,cAAC1D,EAAQ,CAACe,UAAaA,EAAWT,QAAQ,kCAAkCjB,KAAMA,eAQxH,EC7CesE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJaQ,IAASC,WAAW9C,SAASC,eAAe,SACpD8C,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,OAORZ,G","file":"static/js/main.d042ec1d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" href=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n  \r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n  \r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\r\n          </li>\r\n\r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button> */}\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? \"dark\" : \"light\"}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n       \r\n      </div>\r\n    </div>\r\n   </nav>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);  \r\n        props.showAlert(\"Converted to UpperCase!\" , \"success\");     \r\n    }\r\n\r\n    const handleLoClick = () => {     \r\n        let newText = text.toLowerCase();\r\n        setText(newText);  \r\n        props.showAlert(\"Converted to LowerCase!\" , \"success\");   \r\n    }\r\n\r\n    const handleClearClick = () => {     \r\n        let newText = (\"\");\r\n        setText(newText);  \r\n        props.showAlert(\"Clear your text!\" , \"success\");    \r\n    }\r\n\r\n      const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance(text);\r\n        window.speechSynthesis.speak(msg);\r\n        const toogle = document.getElementById('toggle')\r\n        if (toogle.textContent === \"Speak\") {\r\n            toogle.innerHTML = \"Stop\"\r\n        }\r\n        else {\r\n            toogle.innerHTML = \"Speak\"\r\n            if (toogle.innerHTML = \"Speak\"){\r\n                window.speechSynthesis.cancel()\r\n            }\r\n        }\r\n        props.showAlert(\"Converted to Voice!\" , \"success\");\r\n    }\r\n    const handleCopy = () => {\r\n    let text = document.getElementById(\"MyBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard!\" , \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\" , \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n   <div className='container' style={{color: props.mode === 'dark' ? \"white\" : \"#042743\"}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{background: props.mode==='dark' ? '#042743' : 'white', color: props.mode === 'dark' ? \"white\" : \"#042743\"}} \r\n    id=\"MyBox\" rows=\"8\"></textarea>\r\n    </div>\r\n    <button className=\"btn btn-warning mx-2 my-2\"onClick={handleUpClick}>Convert to Uppercase</button>\r\n    <button className=\"btn btn-warning mx-2\"onClick={handleClearClick}>Clear Text</button>\r\n    <button className=\"btn btn-warning mx-2\"onClick={handleLoClick}>Convert to Lowercase</button>\r\n    <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\" id=\"toggle\">Speak</button>\r\n    <button className=\"btn btn-warning mx-2\"onClick={handleCopy}>Text Copy</button>\r\n    <button className=\"btn btn-warning mx-2\"onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n   </div>\r\n   <div className=\"container my-3\" style={{color: props.mode === 'dark' ? \"white\" : \"#042743\"}}>\r\n    <h1>Your text summary</h1>\r\n    <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n    <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length > 0 ? text: \"Enter Something in the textbox above to preview it here\"}</p>\r\n   </div>\r\n   </>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n  \r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState(\r\n        {\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n        }\r\n    );\r\n    const [btntext, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleStyle = () => {\r\n        if(myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n                \r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")      \r\n        }\r\n    }\r\n\r\n  return (\r\n      <div classNameName='container' style={myStyle}  >\r\n        <h1 classNameName='my-3'>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" style={myStyle} data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        About\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Service\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Contact\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container my-3\">\r\n<button onClick={toggleStyle} type=\"button\" className=\"btn btn-info\">{btntext}</button>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n   props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n   </div>\r\n    \r\n   )\r\n  }\r\nexport default  Alert \r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {BrowserRouter as Router, Routes , Route} from 'react-router-dom'\n\n\nfunction App() {\n \n  const [mode, setMode] = useState('light');  // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n  <Router>\n     <Navbar title = \"TextUtils\" AboutText = \"About\" mode = {mode} toggleMode = {toggleMode} />\n     <Alert alert={alert}/>\n     <div className=\"container my-3\"> \n     <Routes>\n      <Route exact path='/about' element={<About/>}>\n       </Route> \n\n      <Route exact path='/' element = <TextForm showAlert = {showAlert} heading=\"Enter the text to analyze below\" mode={mode} />>   \n     </Route> \n\n      </Routes>    \n    </div>\n     </Router> \n    </>\n  );  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}